buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mod_version
group = 'se.gory_moon'
archivesBaseName = 'PlayerMobs'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8

if (System.getenv().GITHUB_RUN_NUMBER  != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().GITHUB_RUN_NUMBER}"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: mcp_channel, version: mcp_mappings
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'CORE,LOADING,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                player_mobs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'CORE,LOADING,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                player_mobs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'CORE,LOADING,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'player_mobs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                player_mobs {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.player_mobs.repack.registrate'
    classifier = ''
}

build.dependsOn shadowJar

shadowJar.finalizedBy('reobfJar')

repositories {
    mavenCentral()
    maven { // Registrate
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    def registrate = "com.tterrag.registrate:Registrate:MC1.16.5-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    classifier = 'sources'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
task deobfJar(type: ShadowJar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output

    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.player_mobs.repack.registrate'

    classifier = 'deobf'
}

task forgelibJar(type: Jar) {
    description = 'Creates a compiled JAR which also contains raw sources.'
    from sourceSets.main.output
    from sourceSets.main.allJava
    classifier = 'forgelib'
}


artifacts {
    archives sourcesJar
    archives deobfJar
    archives forgelibJar
}

jar {
    manifest {
        attributes([
            "Specification-Title": "player_mobs",
            "Specification-Vendor": "GoryMoon",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"GoryMoon",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Jar Signing
import net.minecraftforge.gradle.common.task.SignJar
task signJar(type: SignJar, dependsOn: shadowJar) {

    onlyIf {
        project.hasProperty('keyStore')
    }

    if (project.hasProperty('keyStore')) {
        project.logger.info('Signing jar ' + jar.archivePath.getName());

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStorePass')
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }

    else {
        project.logger.warn('Could not sign ' + jar.archivePath.getName() + '. No keyStore property could be found')
    }
}

build.dependsOn signJar