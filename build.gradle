plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = mod_version
group = 'se.gory_moon'
archivesBaseName = "PlayerMobs-$mc_version"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

if (System.getenv().GITHUB_RUN_NUMBER  != null) { //adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().GITHUB_RUN_NUMBER}"
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mappings_channel, version: mappings_version
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'player_mobs'

            // Make mixins work on dependencies
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                player_mobs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'player_mobs'

            // Make mixins work on dependencies
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                player_mobs {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'player_mobs'

            // Make mixins work on dependencies
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                player_mobs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'CORE,LOADING,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Make mixins work on dependencies
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'player_mobs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                player_mobs {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.player_mobs.repack.registrate'
    archiveClassifier.set('')
}

jar.finalizedBy('shadowJar')
shadowJar.finalizedBy('signJar', 'reobfJar')

repositories {
    mavenCentral()
    maven {
        // Registrate
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    def registrate = "com.tterrag.registrate:Registrate:${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
task deobfJar(type: ShadowJar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output

    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'se.gory_moon.player_mobs.repack.registrate'

    archiveClassifier.set('deobf')
}

task forgelibJar(type: Jar) {
    description = 'Creates a compiled JAR which also contains raw sources.'
    from sourceSets.main.output
    from sourceSets.main.allJava
    archiveClassifier.set('forgelib')
}


artifacts {
    archives sourcesJar
    archives deobfJar
    archives forgelibJar
}

jar {
    manifest {
        attributes([
            "Specification-Title": "player_mobs",
            "Specification-Vendor": "GoryMoon",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" :"GoryMoon",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar
task signJar(type: SignJar, dependsOn: jar) {
    dependsOn 'reobfJar'
    onlyIf {
        project.hasProperty('keyStore')
    }

    if (project.hasProperty('keyStore')) {
        project.logger.info("Signing jar ${jar.archiveFileName.get()}")

        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStorePass')
        inputFile = jar.archiveFile.get()
        outputFile = jar.archiveFile.get()
    }

    else {
        project.logger.log(LogLevel.WARN, "Could not sign ${jar.archiveFileName.get()}. No keyStore property could be found")
    }
}